package gtag

import (
	"bytes"
	"text/template"
)

type templateData struct {
	Package string
	Type    string
	Fields  []string
}

const templateLayout = `
// Code generated by gtag. DO NOT EDIT.
// See: https://github.com/wolfogre/gtag

//go:generate gtag
package {{.Package}}

import "reflect"

var (
	valueOf{{.Type}} = {{.Type}}{}
	typeOf{{.Type}}  = reflect.TypeOf(valueOf{{.Type}})

{{$type := .Type}}
{{- range .Fields}}
	_ = valueOf{{$type}}.{{.}}
	fieldOf{{$type}}{{.}}, _ = typeOf{{$type}}.FieldByName("{{.}}")
	tagOf{{$type}}{{.}} = fieldOf{{$type}}{{.}}.Tag
{{end}}
)

type {{$type}}Tags struct {
{{- range .Fields}}
	{{.}} string
{{- end}}
}

func ({{$type}}) Tags(tag string) {{$type}}Tags {
	return {{$type}}Tags{
{{- range .Fields}}
		{{.}}: tagOf{{$type}}{{.}}.Get(tag),
{{- end}}
	}
}

`

func execute(data templateData) []byte {
	tp := template.Must(template.New("").Parse(templateLayout))

	out := &bytes.Buffer{}
	if err := tp.Execute(out, data); err != nil {
		panic(err)
	}

	return out.Bytes()
}
