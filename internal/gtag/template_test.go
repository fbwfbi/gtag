package gtag

import (
	"testing"

	"github.com/pmezard/go-difflib/difflib"
)

func Test_execute(t *testing.T) {
	type args struct {
		data templateData
	}
	tests := []struct {
		name string
		args args
		want string
	}{
		{
			name: "regular",
			args: args{
				data: templateData{
					Package: "test",
					Types: []templateDataType{
						{
							Name:   "test",
							Fields: []string{"A", "b"},
						},
					},
				},
			},
			want: `
// Code generated by gtag. DO NOT EDIT.
// See: https://github.com/wolfogre/gtag

//go:generate gtag
package test

import "reflect"

var (
	valueOftest = test{}
	typeOftest  = reflect.TypeOf(valueOftest)


	_ = valueOftest.A
	fieldOftestA, _ = typeOftest.FieldByName("A")
	tagOftestA = fieldOftestA.Tag

	_ = valueOftest.b
	fieldOftestb, _ = typeOftest.FieldByName("b")
	tagOftestb = fieldOftestb.Tag

)

type testTags struct {
	A string
	b string
}

func (test) Tags(tag string) testTags {
	return testTags{
		A: tagOftestA.Get(tag),
		b: tagOftestb.Get(tag),
	}
}

`,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := execute(tt.args.data); string(got) != tt.want {
				t.Errorf("execute() = %v, want %v", got, tt.want)
				diff := difflib.UnifiedDiff{
					A:        difflib.SplitLines(string(got)),
					B:        difflib.SplitLines(tt.want),
					FromFile: "got",
					ToFile:   "want",
				}
				text, _ := difflib.GetUnifiedDiffString(diff)
				t.Log(text)
			}
		})
	}
}
