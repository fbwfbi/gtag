package gtag

import (
	"testing"
)

func Test_execute(t *testing.T) {
	type args struct {
		data templateData
	}
	tests := []struct {
		name string
		args args
		want string
	}{
		{
			name: "regular",
			args: args{
				data: templateData{
					Package: "test",
					Type:    "Test",
					Fields:  []string{"A", "b"},
				},
			},
			want: `
// Code generated by gtag. DO NOT EDIT.
// See: https://github.com/wolfogre/gtag

//go:generate gtag
package test

import "reflect"

var (
	valueOfTest = Test{}
	typeOfTest  = reflect.TypeOf(valueOfTest)


	_ = valueOfTest.A
	fieldOfTestA, _ = typeOfTest.FieldByName("A")
	tagOfTestA = fieldOfTestA.Tag

	_ = valueOfTest.b
	fieldOfTestb, _ = typeOfTest.FieldByName("b")
	tagOfTestb = fieldOfTestb.Tag

)

type TestTags struct {
	A string
	b string
}

func (Test) Tags(tag string) TestTags {
	return TestTags{
		A: tagOfTestA.Get(tag),
		b: tagOfTestb.Get(tag),
	}
}

`,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := execute(tt.args.data); string(got) != tt.want {
				t.Errorf("execute() = %v, want %v", got, tt.want)
			}
		})
	}
}
